import os
import argparse
import requests
import mygene

import numpy as np
import pandas as pd
from collections import OrderedDict

# PATH
path_TRANSPARENT=os.path.dirname(os.path.abspath(__file__))
path_InputDir=os.path.join(path_TRANSPARENT, 'input')
path_OutputDir=os.path.join(path_TRANSPARENT, 'output')

# TERMINAL OPTIONS
def opzioni():
    parser = argparse.ArgumentParser(prog='python3 create_network.py',
                                 description="Script that allows you to generate a Protein Protein Interaction (PPI) using the significant TFs")
    parser.add_argument("-f", "--file", help="Path of the input file (file generated by the pipeline) or name of the file if it is located in the output outputdir", required=True, action="store")
    parser.add_argument("-d", "--outputdir", help="Output directory")
    parser.add_argument("-p", "--parametr", choices=["pvalue", "padj"], default='padj', help="Choose the benchmark for the significance of genes")
    parser.add_argument("-t", "--threshold", default=0.05, help="Threshold value below which to consider a gene as significant")
    parser.add_argument("-l", "--list", help="Path of the file containing the list of target genes to be included in the network")
    args = parser.parse_args()
    return(args)

# INPUT FILE PATH AND NAME [-f] (file generated by main.py) 
def path_file_name_in(args):
    if os.path.isfile(args.file):
        path_input=args.file
        path, input_filename=os.path.split(args.file)
        input_filename=input_filename.split('.txt')
        input_filename=f'{input_filename[0]}_network'
    elif os.path.isfile(f'{path_OutputDir}/{args.file}'):
        path_input = f'{path_OutputDir}/{args.file}'
        input_filename=args.file.split(".txt")
        input_filename=f'{input_filename[0]}_network'
    else:
        print('File not found')  
    return(path_input, input_filename)

# OUTPUT FILE PATH [-o]
def path_file_out(args, input_filename):
    if args.outputdir == None:
        args.outputdir = 'empty'
    if os.path.isdir(args.outputdir):
        if args.list==None:
            path_output=f'{args.outputdir}/{input_filename}_{args.threshold}.tsv'
            path_output_genes=None
        else:
            path_output=f'{args.outputdir}/{input_filename}_{args.threshold}.tsv'
            path_output_genes=f'{args.outputdir}/{input_filename}_{args.threshold}_genes.tsv'
    elif args.outputdir=='empty':
        if args.list==None:
            path_output=f'{path_OutputDir}/{input_filename}_{args.threshold}.tsv'
            path_output_genes=None
        else:
            path_output=f'{path_OutputDir}/{input_filename}_{args.threshold}.tsv'
            path_output_genes=f'{path_OutputDir}/{input_filename}_{args.threshold}_genes.tsv'
    elif os.path.isdir(args.outputdir)!=True and os.path.isdir(args.outputdir)!='empty':
        if args.list==None:
            path_output=f'{path_OutputDir}/{args.outputdir}_network_{args.threshold}.tsv'
            path_output_genes=None
        else:
            path_output=f'{path_OutputDir}/{args.outputdir}_network_{args.threshold}.tsv'
            path_output_genes=f'{path_OutputDir}/{args.outputdir}_network_{args.threshold}_genes.tsv'
    return(path_output, path_output_genes)

# TARGET GENES LIST [-l]
def path_file_list(args):
    if os.path.isfile(args.list):
        path_list=args.list
    elif os.path.isfile(f'{path_InputDir}/{args.list}'):
        path_list = f'{path_InputDir}/{args.list}'
    else:
        path_list=f'{args.list} not found'
    return(path_list)    

# RESULTS DF
def dataframe(path_input, args):
    df=pd.read_csv(path_input, sep="\t")
    df=df.drop(df.columns[[2, 3, 4, 5]], axis='columns')
    if args.parametr=='pvalue':
        df=df.drop(['padj'], axis=1)
        df=df[df['p-value']<float(args.threshold)]
    elif args.parametr=='padj':
        df=df.drop(['p-value'], axis=1)
        df=df[df['padj']<float(args.threshold)]
    return(df)

# GENERATES PPI
def PPI_generate(final_TF_list, path_output):
    string_api_url = "https://string-db.org/api"
    output_format = "tsv"
    method = "get_link?"
    params = {
        "identifiers" : "\r".join(final_TF_list),
        "species" : 9606,                    # NCBI taxon identifiers (e.g. Human is 9606, see: STRING organisms)
        #"limit" : 1,                        # limits the number of matches per query identifier (best matches come first)
        "hide_disconnected_nodes" : 1,       # hides all proteins that are not connected to any other protein in your network (0 or 1) (default:0)
        "required_score" : 900               # threshold of significance to include an interaction, a number between 0 and 1000 (default depends on the network)
    }
    request_url = "/".join([string_api_url, output_format, method])
    results = requests.post(request_url, data=params)
    with open(path_output, 'wb') as f:
        f.write(results.content)

# REMOVING UNKNOWN GENE IDs 
def delete_no_genes(target_genes_list):
    try:
        target_genes=[]
        tot_genes_df=pd.read_table(f'{path_TRANSPARENT}/tot_transcripts.txt',  header=None, sep=' ')
        total_genes=np.array(tot_genes_df[0])
        target_genes_to_test=open(target_genes_list).readlines()
        for x in target_genes_to_test:
            gene=x.strip()
            gene=int(gene)
            if gene in total_genes:
                target_genes.append(str(gene))
        target_genes_list=list(target_genes)
        return(target_genes_list)
    except:
        print('Error: Check if the table has the header or some wrong gene ID and delete them')

# SEARCHING GENE SYMBOL
def genes_symbol(df_genes_list):
    mg=mygene.MyGeneInfo()
    df_genes=mg.querymany(df_genes_list, species='human', fields='name, symbol', as_dataframe=True)
    target_genes_list=list(df_genes['symbol'])
    return(target_genes_list)
   


def main():
    args=opzioni()
    path_input, output_file_name=path_file_name_in(args)                      # [-f]
    path_output, path_output_gene=path_file_out(args, output_file_name)       # [-o]
    if args.list != None:
        path_target_genes_list=path_file_list(args)                           # [-l]
        target_genes_list=delete_no_genes(path_target_genes_list)  
        target_gene_names_list=genes_symbol(target_genes_list)
    df=dataframe(path_input, args)
    TF_list=list(df['Name'])
    if args.list != None:
        TF_gene_list=TF_list+target_gene_names_list
        final_TF_gene_list = list(OrderedDict.fromkeys(TF_gene_list))
        final_TF_list = list(OrderedDict.fromkeys(TF_list))
        PPI_generate(final_TF_gene_list, path_output_gene)
        PPI_generate(final_TF_list, path_output)
    else:
        final_TF_list = list(OrderedDict.fromkeys(TF_list))
        PPI_generate(final_TF_list, path_output)
    print('DONE')



if __name__=="__main__":
    main()
