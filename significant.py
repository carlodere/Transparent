import os
import argparse

import pandas as pd

# PATH
path_TRANSPARENT=os.path.dirname(os.path.abspath(__file__))
path_InputDir=os.path.join(path_TRANSPARENT, 'input')
path_OutputDir=os.path.join(path_TRANSPARENT, 'output')
path_AvarageDir=os.path.join(path_TRANSPARENT, 'averages_TF')

# TERMINAL OPTIONS
def opzioni():
    parser = argparse.ArgumentParser(prog='python3 significant_genes.py',
                                 description="Script that allows you to filter the results obtained based on a parameter between p-value and padj and a threshold")
    parser.add_argument("-f", "--file", help="Path of the input file (file generated by the pipeline) or name of the file if it is located in the output outputdir", required=True)
    parser.add_argument("-l", "--list", help="Path of the file containing the list of target genes", required=True)
    parser.add_argument("-d", "--outputdir", help="Output directory")
    parser.add_argument("-p", "--parametr",  choices=["pvalue", "padj"], default='padj', help="Choose the benchmark for the significance of genes")
    parser.add_argument("-t", "--threshold", default=0.05, type=float, help="Threshold value below which to consider a gene as significant")
    args=parser.parse_args()
    return(args)

# INPUT FILE PATH AND NAME [-f] (file generated by main.py) 
def path_file_name_in(args):
    if os.path.isfile(args.file):
        path_input=args.file
        path, input_filename=os.path.split(args.file)
        input_filename=input_filename.rsplit('.', 1)[0]
        input_filename=f'{input_filename}_significant_TF_{args.threshold}'
    elif os.path.isfile(f'{path_OutputDir}/{args.file}'):
        path_input = f'{path_OutputDir}/{args.file}'
        input_filename=f'{args.file.strip(".txt")}_significant_TF_{args.threshold}'
    else:
        print('File not found')  
    return(path_input, input_filename)    

# OUTPUT FILE PATH [-o]
def path_file_out(args):
    if args.outputdir == None:
        args.outputdir = 'empty'
    if os.path.isdir(args.outputdir): 
        path_output=args.outputdir
    elif args.outputdir=='empty':
        path_output=path_OutputDir
    elif  os.path.isdir(args.outputdir)!=True and os.path.isdir(args.outputdir)!='empty':
        path_output=path_OutputDir
    return(path_output)

# TARGET GENES LIST FILE [-l]
def path_file_list(args):
    if os.path.isfile(args.list):
        path_list=args.list
    elif os.path.isfile(f'{path_InputDir}/{args.list}'):
        path_list = f'{path_InputDir}/{args.list}'
    else:
        path_list='File not found'
    return(path_list)    

# TARGET GENES DF
def target_genes(path_lista):
    df_target_genes=pd.read_csv(path_lista, sep=',', header=None)
    df_target_genes.columns=['GENE_ID']
    return(df_target_genes)

# RESULTS DF
def dataframe(path_input, args):
    df=pd.read_csv(path_input, sep="\t")
    df=df.drop(df.columns[[2, 3, 4, 5]], axis='columns')
    if args.parametr=='pvalue':
        df=df.drop(['padj'], axis=1)
        df=df[df['p-value']<args.threshold]
    elif args.parametr=='padj':
        df=df.drop(['p-value'], axis=1)
        df=df[df['padj']<args.threshold]
    return(df)

# MODEL DF
def means_dataframe(model):
    filename=f'PWMTF_{model}_averages.txt'
    means_df=pd.read_table(f"{path_AvarageDir}/{filename}", sep=',')
    means_df.drop(means_df.columns[[1,2]], axis='columns', inplace=True)
    return(means_df)

# SEARCHING GENE SYMBOL
def symbol_gene(gene_dict, entrez_id):
    if entrez_id in gene_dict.keys():
        symbol=gene_dict[entrez_id]
    else:
        symbol='Not found'  
    return(symbol)

    
def main():
    args=opzioni()
    path_input, input_filename=path_file_name_in(args)      # [-f]
    path_output=path_file_out(args)                         # [-o]
    path_target_genes_list=path_file_list(args)             # [-l]
    target_genes_df=target_genes(path_target_genes_list)
    df=dataframe(path_input, args)
    df.to_csv(f'{path_output}/{input_filename}_{args.parametr}.csv', index=False, sep='\t')
    df_tot_transcripts=pd.read_table(f'{path_TRANSPARENT}/tot_transcripts.txt', header=None, sep=' ')
    df_tot_transcripts.columns=['GENE_ID', 'SYMBOL', 'MEAN']
    gene_dict=pd.Series(df_tot_transcripts.SYMBOL.values, index=df_tot_transcripts.GENE_ID).to_dict()
    f=open(f'{path_output}/{input_filename}_{args.parametr}_genes.txt', 'w')
    cont=0
    while cont < len(df):
        print(df.iloc[cont, 0])
        means_df=means_dataframe(df.iloc[cont, 0])
        temp_means_genes_df=target_genes_df.merge(means_df, how="inner", on="GENE_ID")
        means_genes_df=temp_means_genes_df.loc[temp_means_genes_df.AVERAGES != 0].copy()
        means_genes_df.sort_values(by=['GENE_ID'], inplace=True)
        f.write(f'- {df.iloc[cont, 0]}, {df.iloc[cont, 1]}, {df.iloc[cont, 2]}\n')
        for row in range(len(means_genes_df)):
            f.write(f'\t{means_genes_df.iloc[row, 0]}, {symbol_gene(gene_dict, means_genes_df.iloc[row, 0])}, {means_genes_df.iloc[row, 1]}\n')
        cont+=1
    f.close()
    print('DONE')
    print(f'{cont} significant TFs were found')



if __name__ == "__main__":
    main()
